#!/usr/bin/env python3

import argparse
import sys

from libwyag import Repository, BaseObject


def cmd_init(args):
    Repository.create(args.path)


def cmd_catfile(args):
    obj = BaseObject.read(Repository.find(), args.object)
    sys.stdout.buffer.write(obj.serialize())


def cmd_hashobject(args):
    sha = BaseObject.create_from_file(
        Repository.find() if args.write else None,
        args.type,
        args.path,
        )
    print(sha)


def cmd_log(args):
    repo = Repository.find()

    def inner(commit, seen=[]):
        if commit.sha in seen:
            return
        seen.append(commit.sha)

        print("%s: %s" % (commit.sha[:7], commit.headline))

        for p in commit.parents:
            inner(p, seen)

    inner(BaseObject.read(repo, args.commit))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Write yourself a Git with Python")
    cmd_parser = parser.add_subparsers(title="Commands", dest="command", required=True)

    parser_init = cmd_parser.add_parser("init", help="Initialize a new, empty repository.")
    parser_init.add_argument("path", metavar="directory", nargs="?", default=".", help="Where to create the repository.")

    parser_catfile = cmd_parser.add_parser("cat-file", help="Provide content of repository objects.")
    parser_catfile.add_argument("type", metavar="type", choices=["blob", "commit", "tag", "tree"], help="Specify the type.")
    parser_catfile.add_argument("object", metavar="object", help="The object to display.")

    parser_hashobject = cmd_parser.add_parser("hash-object", help="Compute object ID and optionally creates a blob from a file")
    parser_hashobject.add_argument("-t", metavar="type", dest="type", choices=["blob", "commit", "tag", "tree"], default="blob", help="Specify the type.")
    parser_hashobject.add_argument("-w", dest="write", action="store_true", help="Actually write the object into the database.")
    parser_hashobject.add_argument("path", help="Read object from <file>.")

    parser_log = cmd_parser.add_parser("log", help="Display history of a given commit.")
    parser_log.add_argument("commit", default="HEAD", nargs="?", help="Commit to start at.")

    args = parser.parse_args(sys.argv[1:])
    if   args.command == "init"        : cmd_init(args)
    elif args.command == "cat-file"    : cmd_catfile(args)
    elif args.command == "hash-object" : cmd_hashobject(args)
    elif args.command == "log"         : cmd_log(args)
