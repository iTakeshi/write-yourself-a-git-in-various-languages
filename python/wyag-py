#!/usr/bin/env python3

import argparse
import pathlib
import sys

from libwyag import Repository, BaseObject


def cmd_init(args):
    Repository.create(args.path)


def cmd_catfile(args):
    obj = BaseObject.read(Repository.find(), args.object)
    sys.stdout.buffer.write(obj.serialize())


def cmd_hashobject(args):
    sha = BaseObject.create_from_file(
        Repository.find() if args.write else None,
        args.type,
        args.path,
        )
    print(sha)


def cmd_log(args):
    repo = Repository.find()

    def inner(commit, seen=[]):
        if commit.sha in seen:
            return
        seen.append(commit.sha)

        print("%s: %s" % (commit.sha[:7], commit.headline))

        for p in commit.parents:
            inner(p, seen)

    inner(BaseObject.read(repo, args.commit))


def cmd_ls_tree(args):
    repo = Repository.find()

    obj = BaseObject.read(repo, args.object)
    if obj.fmt != "tree":
        raise Exception("ls-tree is only for tree object.")

    # TODO: git ls-tree shows the entries in current dir
    for e in obj.entries:
        print("%s %s %s\t%s" % (
            "0" * (6 - len(e.mode)) + e.mode,
            BaseObject.read(repo, e.sha).fmt,
            e.sha,
            e.path,
            ))


def cmd_checkout(args):
    repo = Repository.find()

    def inner(root, tree):
        for e in tree.entries:
            obj = BaseObject.read(repo, e.sha)
            path = root / e.path
            if obj.fmt == "tree":
                path.mkdir()
                inner(path, obj)
            elif obj.fmt == "blob":
                path.write_bytes(obj.serialize())

    root = pathlib.Path(args.path)
    if not root.exists():
        root.mkdir()
    if root.is_dir():
        if list(root.glob("*")):
            raise Exception("Not a empty directory: %s" % root)
        else:
            obj = BaseObject.read(repo, args.object)
            if obj.fmt == "tree":
                inner(root, obj)
            elif obj.fmt == "commit":
                inner(root, BaseObject.read(repo, obj.tree_sha))
    else:
        raise Exception("Not a directory (file exists): %s" % root)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Write yourself a Git with Python")
    cmd_parser = parser.add_subparsers(title="Commands", dest="command", required=True)

    parser_init = cmd_parser.add_parser("init", help="Initialize a new, empty repository.")
    parser_init.add_argument("path", metavar="directory", nargs="?", default=".", help="Where to create the repository.")

    parser_catfile = cmd_parser.add_parser("cat-file", help="Provide content of repository objects.")
    parser_catfile.add_argument("type", metavar="type", choices=["blob", "commit", "tag", "tree"], help="Specify the type.")
    parser_catfile.add_argument("object", metavar="object", help="The object to display.")

    parser_hashobject = cmd_parser.add_parser("hash-object", help="Compute object ID and optionally creates a blob from a file")
    parser_hashobject.add_argument("-t", metavar="type", dest="type", choices=["blob", "commit", "tag", "tree"], default="blob", help="Specify the type.")
    parser_hashobject.add_argument("-w", dest="write", action="store_true", help="Actually write the object into the database.")
    parser_hashobject.add_argument("path", help="Read object from <file>.")

    parser_log = cmd_parser.add_parser("log", help="Display history of a given commit.")
    parser_log.add_argument("commit", default="HEAD", nargs="?", help="Commit to start at.")

    parser_ls_tree = cmd_parser.add_parser("ls-tree", help="Pretty-print a tree object.")
    parser_ls_tree.add_argument("object", help="The object to show.")

    parser_checkout = cmd_parser.add_parser("checkout", help="Checkout a commit inside of a directory.")
    parser_checkout.add_argument("object", help="The commit or tree to checkout.")
    parser_checkout.add_argument("path", help="The EMPTY directory to checkout on.")

    args = parser.parse_args(sys.argv[1:])
    if   args.command == "init"        : cmd_init(args)
    elif args.command == "cat-file"    : cmd_catfile(args)
    elif args.command == "hash-object" : cmd_hashobject(args)
    elif args.command == "log"         : cmd_log(args)
    elif args.command == "ls-tree"     : cmd_ls_tree(args)
    elif args.command == "checkout"    : cmd_checkout(args)
